<?php

//require_once '/var/www-libs/vci/Dom/Table.php';

/**
 * Test class for Vci_Dom_Table.
 * Generated by PHPUnit on 2011-10-13 at 10:59:28.
 */
class Vci_Dom_TableTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Vci_Dom_Table
     */
    protected $objectV1;

    /**
     * @var Vci_Dom_Table
     */
    protected $objectV2;

    /**
     * @var Vci_Dom_Table
     */
    protected $objectV3;

    /**
     * @var Vci_Dom_Table
     */
    protected $objectV4;

    /**
     * @var Vci_Dom_Table
     */
    protected $objectV5;

    /**
     * @var Vci_Dom_Table
     */
    protected $objectV6;

    /**
     * @var Vci_Dom_Table
     */
    protected $objectV7;

    /**
     * Basic HTML5 table layout
     **/
    protected $tableV1 = <<<TABLE
        <table>
          <thead>
            <tr>
              <th>h1</th>
              <th>h2</th>
              <th>h3</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>d1</td>
              <td>d2</td>
              <td>d3</td>
            </tr>
            <tr>
              <td>d1-1</td>
              <td>d1-2</td>
              <td>d1-3</td>
            </tr>
          </tbody>
        </table> 
TABLE;

    /**
     * Correct headers for the tableV1
     **/
    protected $headersV1 = array(
        array(
            'offset' => 0
            ,'alias' => 'head1'
            ,'value'  => 'h1'
        )
        ,array(
            'offset' => 1
            ,'alias' => 'head2'
            ,'value'  => 'h2'
        )
        ,array(
            'offset' => 2
            ,'alias' => 'head3'
            ,'value'  => 'h3'
        )
    );

    /**
     * HTML5 table layout with two header rows
     **/
    protected $tableV2 = <<<TABLE
        <table>
          <thead>
            <tr>
              <th>h1</th>
              <th>h2</th>
              <th>h3</th>
            </tr>
            <tr>
              <th>h2-1</th>
              <th>h2-2</th>
              <th>h2-3</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>d1</td>
              <td>d2</td>
              <td>d3</td>
            </tr>
          </tbody>
        </table>
TABLE;

    /**
     * Correct headers for the tableV2
     **/
    protected $headersV2 = array(
        array(
            'offset' => 0
            ,'alias' => 'head1'
            ,'value'  => 'h2-1'
        )
        ,array(
            'offset' => 1
            ,'alias' => 'head2'
            ,'value'  => 'h2-2'
        )
        ,array(
            'offset' => 2
            ,'alias' => 'head3'
            ,'value'  => 'h2-3'
        )
    );

    /**
     * Malformed HTML5 table layout with an initial row unbounded by <thead>
     *  or <tbody> tags, followed immediately by a <thead> section (this one
     *  is admittedly a little odd).
     **/
    protected $tableV3 = <<<TABLE
        <table>
          <tr>
            <td>dh1</td>
            <td>dh2</td>
            <td>dh3</td>
          </tr>
          <thead>
            <tr>
              <th>h1</th>
              <th>h2</th>
              <th>h3</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>d1</td>
              <td>d2</td>
              <td>d3</td>
            </tr>
          </tbody>
        </table>
TABLE;

    /**
     * Correct headers for the tableV3
     **/
    protected $headersV3 = array(
        array(
            'offset' => 0
            ,'alias' => 'head1'
            ,'value'  => 'h1'
        )
        ,array(
            'offset' => 1
            ,'alias' => 'head2'
            ,'value'  => 'h2'
        )
        ,array(
            'offset' => 2
            ,'alias' => 'head3'
            ,'value'  => 'h3'
        )
    );

    /**
     * Malformed HTML5 table layout with an initial row unbounded by <thead>
     *  or <tbody> tags.
     **/
    protected $tableV4 = <<<TABLE
        <table>
          <tr>
            <td>dh1</td>
            <td>dh2</td>
            <td>dh3</td>
          </tr>
          <tbody>
            <tr>
              <td>d1</td>
              <td>d2</td>
              <td>d3</td>
            </tr>
          </tbody>
          <thead>
            <tr>
              <th>h1</th>
              <th>h2</th>
              <th>h3</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>d1</td>
              <td>d2</td>
              <td>d3</td>
            </tr>
          </tbody>
        </table>
TABLE;

    /**
     * Correct headers for the tableV4
     **/
    protected $headersV4 = array(
        array(
            'offset' => 0
            ,'alias' => 'head1'
            ,'value'  => 'dh1'
        )
        ,array(
            'offset' => 1
            ,'alias' => 'head2'
            ,'value'  => 'dh2'
        )
        ,array(
            'offset' => 2
            ,'alias' => 'head3'
            ,'value'  => 'dh3'
        )
    );

    /**
     * Malformed HTML5 table layout with a plain <tr> block serving for the 
     *  header row.
     **/
    protected $tableV5 = <<<TABLE
        <table>
          <tr>
            <th>dh1</th>
            <th>dh2</th>
            <th>dh3</th>
          </tr>
          <tbody>
            <tr>
              <td>d2-1</td>
              <td>d2-2</td>
              <td>d2-3</td>
            </tr>
          </tbody>
          <thead>
            <tr>
              <th>h1</th>
              <th>h2</th>
              <th>h3</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>d3-1</td>
              <td>d3-2-</td>
              <td>d3-3</td>
            </tr>
          </tbody>
        </table>
TABLE;

    /**
     * Correct headers for the tableV5
     **/
    protected $headersV5 = array(
        array(
            'offset' => 0
            ,'alias' => 'head1'
            ,'value'  => 'dh1'
        )
        ,array(
            'offset' => 1
            ,'alias' => 'head2'
            ,'value'  => 'dh2'
        )
        ,array(
            'offset' => 2
            ,'alias' => 'head3'
            ,'value'  => 'dh3'
        )
    );

    /**
     * Malformed HTML5 table layout with a <tbody> block on the top
     **/
    protected $tableV6 = <<<TABLE
        <table>
          <tbody>
            <tr>
              <td>d1</td>
              <td>d2</td>
              <td>d3</td>
            </tr>
            <tr>
              <td>d2-1</td>
              <td>d2-2-</td>
              <td>d2-3</td>
            </tr>
          </tbody>
          <thead>
            <tr>
              <th>h1</th>
              <th>h2</th>
              <th>h3</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>d3-1</td>
              <td>d3-2-</td>
              <td>d3-3</td>
            </tr>
          </tbody>
        </table>
TABLE;

    /**
     * Correct headers for the tableV6
     **/
    protected $headersV6 = array(
        array(
            'offset' => 0
            ,'alias' => 'head1'
            ,'value'  => 'd1'
        )
        ,array(
            'offset' => 1
            ,'alias' => 'head2'
            ,'value'  => 'd2'
        )
        ,array(
            'offset' => 2
            ,'alias' => 'head3'
            ,'value'  => 'd3'
        )
    );

    /**
     * Basic HTML4 table
     **/
    protected $tableV7 = <<<TABLE
        <table>
          <tr>
            <td>d1</td>
            <td>d2</td>
            <td>d3</td>
          </tr>
          <tr>
            <td>d2-1</td>
            <td>d2-2-</td>
            <td>d2-3</td>
          </tr>
          <tr>
            <td>d3-1</td>
            <td>d3-2-</td>
            <td>d3-3</td>
          </tr>
        </table>
TABLE;

    /**
     * Correct headers for the tableV7
     **/
    protected $headersV7 = array(
        array(
            'offset' => 0
            ,'alias' => 'head1'
            ,'value'  => 'd1'
        )
        ,array(
            'offset' => 1
            ,'alias' => 'head2'
            ,'value'  => 'd2'
        )
        ,array(
            'offset' => 2
            ,'alias' => 'head3'
            ,'value'  => 'd3'
        )
    );

    /**
     * An array of data for all testing tables
     *
     * Each array entry contains a sub-array of the table object and the correct
     *  headers.
     * 
     * Example: 
     *  array(
     *      array(
     *          'object' => Vci_Dom_Table object
     *          ,'headers' => headers array
     *          ,'name' => descriptive name
     *      )
     *      ,array(
     *          'object' => Vci_Dom_Table object
     *          ,'headers' => headers array
     *          ,'name' => descriptive name
     *      )
     *  )
     **/
    protected $tablesData;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // V1
        $dom = new Vci_Dom_Document();
        $dom->loadHTML($this->tableV1);
        $table = $dom->query('//table');
        $table = $table->item(0);
        $this->objectV1 = new Vci_Dom_Table($table);

        // V2
        $dom = new Vci_Dom_Document();
        $dom->loadHTML($this->tableV2);
        $table = $dom->query('//table');
        $table = $table->item(0);
        $this->objectV2 = new Vci_Dom_Table($table);

        // V3
        $dom = new Vci_Dom_Document();
        $dom->loadHTML($this->tableV3);
        $table = $dom->query('//table');
        $table = $table->item(0);
        $this->objectV3 = new Vci_Dom_Table($table);

        // V4
        $dom = new Vci_Dom_Document();
        $dom->loadHTML($this->tableV4);
        $table = $dom->query('//table');
        $table = $table->item(0);
        $this->objectV4 = new Vci_Dom_Table($table);

        // V5
        $dom = new Vci_Dom_Document();
        $dom->loadHTML($this->tableV5);
        $table = $dom->query('//table');
        $table = $table->item(0);
        $this->objectV5 = new Vci_Dom_Table($table);

        // V6
        $dom = new Vci_Dom_Document();
        $dom->loadHTML($this->tableV6);
        $table = $dom->query('//table');
        $table = $table->item(0);
        $this->objectV6 = new Vci_Dom_Table($table);

        // V7
        $dom = new Vci_Dom_Document();
        $dom->loadHTML($this->tableV7);
        $table = $dom->query('//table');
        $table = $table->item(0);
        $this->objectV7 = new Vci_Dom_Table($table);

        // set up the tablesData array
        $this->tablesData = array(
            array(
                'object' => $this->objectV1
                ,'headers' => $this->headersV1
                ,'name' => 'V1'
            ),
            array(
                'object' => $this->objectV2
                ,'headers' => $this->headersV2
                ,'name' => 'V2'
            ),
            array(
                'object' => $this->objectV3
                ,'headers' => $this->headersV3
                ,'name' => 'V3'
            ),
            array(
                'object' => $this->objectV4
                ,'headers' => $this->headersV4
                ,'name' => 'V4'
            ),
            array(
                'object' => $this->objectV5
                ,'headers' => $this->headersV5
                ,'name' => 'V5'
            ),
            array(
                'object' => $this->objectV6
                ,'headers' => $this->headersV6
                ,'name' => 'V6'
            ),
            array(
                'object' => $this->objectV7
                ,'headers' => $this->headersV7
                ,'name' => 'V7'
            ),
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Loads the correct headers into each table variant (otherwise, they are
     *  headerless)
     **/
    protected function loadTheHeaders(){
        foreach( $this->tablesData as $data ){
            $data['object']->setHeaders($data['headers']);
        }
    }

    /**
     * Complete
     */
    public function testSetHeaders()
    {
        // set our object
        $object = $this->tablesData[0]['object'];

        // check for the correct exception when missing offset
        $headers = $this->tablesData[0]['headers'];
        unset($headers[0]['offset']);
        $caught = false;
        try{
            $object->setHeaders($headers);
        }catch( Exception $expected ){
            $caught = true;
        }
        if( !$caught ){
            $this->fail('Missing "offset" was not caught');
        }

        // check for the correct exception when missing both value and regex
        $headers = $this->tablesData[0]['headers'];
        unset($headers[0]['value']);
        unset($headers[0]['regex']);
        $caught = false;
        try{
            $object->setHeaders($headers);
        }catch( Exception $expected ){
            $caught = true;
        }
        if( !$caught ){
            $this->fail('Missing both "value" and "regex" was not caught');
        }

        // check for correct execution with no exceptions for all table types
        foreach( $this->tablesData as $data ){
            try{
                $data['object']->setHeaders($data['headers']);
            }catch( Exception $unexpected ){
                $this->fail('Headers should have been set, but the following exception was thrown instead on object "'.$data['name'].'": '.$unexpected->getMessage());
            }
        }
    }

    /**
     * Complete
     */
    public function testValidateHeaders()
    {
        // set our object
        $object = $this->tablesData[0]['object'];

        // check for the correct regex mismatch exception
        $headers = $this->tablesData[0]['headers'];
        $headers[0]['regex'] = '/this will not match/';
        $object->setHeaders($headers, false);
        $caught = false;
        try{
            $object->validateHeaders();
        }catch( Exception $expected ){
            $caught = true;
        }
        if( !$caught ){
            $this->fail('Regex mis-match was not caught');
        }

        // check for the correct value mismatch exception
        $headers = $this->tablesData[0]['headers'];
        $headers[0]['value'] = 'this will not match';
        $object->setHeaders($headers, false);
        $caught = false;
        try{
            $object->validateHeaders();
        }catch( Exception $expected ){
            $caught = true;
        }
        if( !$caught ){
            $this->fail('Value mis-match was not caught');
        }

        // check for correct execution with regex match
        $headers = $this->tablesData[0]['headers'];
        $headers[0]['regex'] = '/^h1$/';
        $object->setHeaders($headers, false);
        try{
            $object->validateHeaders();
        }catch( Exception $unexpected ){
            $this->fail('Header regex should have matched, but an exception was thrown instead');
        }

        // check for correct execution with no exceptions for all table types
        foreach( $this->tablesData as $data ){
            $data['object']->setHeaders($data['headers']);
            try{
                $data['object']->validateHeaders();
            }catch( Exception $unexpected ){
                $this->fail('Headers should have validated, but the following exception was thrown instead on object "'.$data['name'].'": '.$unexpected->getMessage());
            }
        }
    }

    /**
     * Complete
     */
    public function testSetIterateAllRows()
    {
        // get our object
        $object = $this->tablesData[0]['object'];
        $object->setReturnType(Vci_Dom_Table_Row::RETURN_TEXT);

        // check for value at first offset
        $row = $object->current();
        $this->assertEquals('d1', $row[0]);

        // check for value at first offset for *very* first row
        $original = $object->setIterateAllRows(true);
        $row = $object->current();
        $this->assertEquals('h1', $row[0]);

        // check that the original was returned properly
        $this->assertEquals(false, $original);
    }

    /**
     * Complete
     */
    public function testSetReturnType()
    {
        // set our object
        $object = $this->tablesData[0]['object'];

        // test the typechecking
        $caught = false;
        try{
            $object->setReturnType(array());
        }catch( Exception $expected ){
            $caught = true;
        }
        if( !$caught ){
            $this->fail('The incorrect input type was not caught');
        }

        // test the const-checking
        $caught = false;
        try{
            $object->setReturnType(1000);
        }catch( Exception $expected ){
            $caught = true;
        }
        if( !$caught ){
            $this->fail('The incorrect CONST input was not caught');
        }

        // set return-type text and test
        $object->setReturnType(Vci_Dom_Table_Row::RETURN_TEXT);
        $this->assertInternalType('string', $object[0][0]);

        // set return-type dom and test
        $previousType = $object->setReturnType(Vci_Dom_Table_Row::RETURN_DOM);
        $this->assertInstanceOf('DOMNode', $object[0][0]);

        // check that the previous type was returned
        $this->assertEquals(Vci_Dom_Table_Row::RETURN_TEXT, $previousType);
    }

    /**
     * @todo Implement testOffsetSet().
     *  (currently these objects are read-only, so this is unneccesary)
     */
    public function testOffsetSet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has no reason to be implemented yet.'
        );
    }

    /**
     * Complete
     */
    public function testOffsetExists()
    {
        // get our object
        $object = $this->tablesData[0]['object'];

        // check for offset
        $this->assertTrue($object->offsetExists(0));

        // check for false offset
        $this->assertFalse($object->offsetExists(2));
    }

    /**
     * @todo Implement testOffsetUnset().
     *  (currently these objects are read-only, so this is unneccesary)
     */
    public function testOffsetUnset()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has no need to be implemented yet.'
        );
    }

    /**
     * Complete
     */
    public function testOffsetGet()
    {
        // set the object
        $object = $this->tablesData[0]['object'];

        // check the return of an illegal offset
        $this->assertNull($object->offsetGet(2));

        // check the return for a legal offset
        $object->setReturnType(Vci_Dom_Table_Row::RETURN_TEXT);
        $this->assertEquals('d1',$object[0][0]);
    }

    /**
     * Complete
     */
    public function testRewind()
    {
        // set our object
        $object = $this->tablesData[0]['object'];

        // next() and rewind() and check our output
        $object->next();
        $object->next();
        $object->rewind();
        $this->assertEquals(0, $object->key());
    }

    /**
     * Complete
     */
    public function testCurrent()
    {
        // set our object
        $object = $this->tablesData[0]['object'];
        $object->setReturnType(Vci_Dom_Table_Row::RETURN_TEXT);

        // rewind() and check our current output
        $object->rewind();
        $row = $object->current();
        $this->assertEquals('d1', $row[0]);

        // next() and check our current output
        $object->next();
        $row = $object->current();
        $this->assertEquals('d1-1', $row[0]);
    }

    /**
     * Complete
     */
    public function testKey()
    {
        // set our object
        $object = $this->tablesData[0]['object'];

        // check our initial key
        $this->assertEquals(0, $object->key());

        // next() and check our current output
        $object->next();
        $this->assertEquals(1, $object->key());
    }

    /**
     * Complete
     */
    public function testNext()
    {
        // set our object
        $object = $this->tablesData[0]['object'];

        // check our initial key
        $object->next();
        $this->assertEquals(1, $object->key());

        // check our initial key
        $object->next();
        $this->assertEquals(2, $object->key());
    }

    /**
     * Complete
     */
    public function testValid()
    {
        // set our object
        $object = $this->tablesData[0]['object'];

        // check our next current position
        $object->next(); // 1
        $this->assertTrue($object->valid());

        // check our next next current position!
        $object->next(); // 2
        $this->assertFalse($object->valid());
    }

    /**
     * Complete
     */
    public function testCount()
    {
        // set our object
        $object = $this->tablesData[0]['object'];

        // check our count
        $this->assertEquals(2, $object->count());
    }
}
?>
